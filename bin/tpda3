#!perl
# PODNAME: tpda3
# ABSTRACT: The Tpda3 application framework and runtime

use strict;
use warnings;

use Getopt::Long qw(GetOptions pod2usage);
use Pod::Usage;

use Tpda3;
use Tpda3::Config;

# Parse options and print usage if there is a syntax error,
# or if usage was explicitly requested.
my $help    = q{};
my $man     = q{};
my $verbose = 0;                             # be quiet
my ($list, $init, $user, $pass, $default, $cfpath);

# Process options.
if ( @ARGV > 0 ) {
    GetOptions(
        'help|?'     => \$help,
        'man'        => \$man,
        'verbose'    => \$verbose,
        'list:s'     => \$list,
        'user=s'     => \$user,
        'password=s' => \$pass,
        'init=s'     => \$init,
        'default=s'  => \$default,
        'cfpath=s'   => \$cfpath,
    ) or pod2usage(2);
}
if ( $man or $help or $#ARGV >= 0 ) {
    pod2usage( VERBOSE => 2 ) if $man;
    if ($help)    { tpda3_version(); pod2usage(1); }
}

my $cfname = shift;         # Run-time configuration name or database name

#- Options
my $opts = {};

tpda3_version();

# Check for the 'list' option
if ( defined $list ) {

    # Initialize configurations
    my $cfg = Tpda3::Config->instance( { list => $list } );

    $cfg->list_mnemonics($list);

    exit 0;
}

# Check for the 'init' option
if ($init) {
    if ($cfname) {
        my $cfg = Tpda3::Config->instance( { cfname => $cfname } );
        $cfg->config_init( $cfname, $init );
    }
    else {
        print "Option -init requires a configuration mnemonic.\n\n";
    }

    exit 0;
}

# Check for the 'default' option
if ( $default ) {

    # Initialize configurations
    my $cfg = Tpda3::Config->instance( { default => $default } );

    $cfg->set_default_mnemonic($default);

    exit 0;
}

# All option arguments
$opts->{user} = $user;
$opts->{pass} = $pass;
$opts->{cfname}  = $cfname;
$opts->{cfpath}  = $cfpath;
$opts->{verbose} = $verbose;

# Go and run the app
Tpda3->new( $opts )->run;

print "Normal exit.\n";
exit 0;

#- Print version

sub tpda3_version {
    my $ver = $Tpda3::VERSION;
    print
"Tpda3 (Tiny Perl Database Application 3) v$ver\n(C) 2010-2015 Stefan Suciu\n\n";
}

=head1 SYNOPSIS

tpda3 [<mnemonic>] [-user <user>] [-password <pass>]

tpda3 -list

tpda3 <mnemonic> -init <new-mnemonic>

Options:

 -list             List available configuration names
 -user             User name
 -password         Password
 -help             Brief help message
 -man              Full documentation
 -verbose          Be verbose
 -init <mnemonic>  Create a copy of a configuration with a different name
 -cfpath <path>    Optional absolute path to the configuration tree

=head1 DESCRIPTION

Tiny Perl Database Application - B<Tpda3> is a classic desktop
database application framework and run-time, written in Perl.  The
graphical user interface is based on PerlTk. It supports the CUBRID,
Firebird, PostgreSQL and SQLite RDBMS.

There is also an early, experimental, graphical user interface based
on wxPerl.

=head2 Configuration

A configuration name is the name of the directory underneath the
B<.tpda3/apps/> path and the term used for it is B<mnemonic>.  This
directory contains at least two other directories B<etc> and
B<scr>. The B<etc> directory contains three required configuration
files. The first is B<connection.yml>.  This file has to be updated
with the connection configuration for your database.  The second
configuration file is B<menu.yml> and contains the applications menu
definitions. The third file is B<toolbar.yml>, for the custom toolbars
in the screens for example the [+] and [-] buttons asociated with
tables.  The other directory named B<scr> is the place where the
screen configuration files are stored.

Configuration files are in YAML format, the format described in the
documentation of the YAML::Tiny module, except the screen
configuration files which are in Config::General format.

=head1 OPTIONS DETAILS

=over

=item B<-init> <mnemonic>

Create a copy of a configuration with a different name.  A mnemonic is
required, a subdirectory name that exists in the I<share> directory.

=item B<-list> [mnemonic]

List all mnemonics (configuration names).

=item B<-user>

Sets the user name.  If the user is specified but not the password than
the login dialog will ask only for the password.  If both the password
and user are provided then the login dialog will be skipped.

=item B<-password>

Sets the password.  If the user option is not specified than show
usage and exit.  If the user is specified skip the login dialog.

=item B<-man>

Prints the manual page and exits.

=item  B<-cfpath> <path>

Optional absolute path to the configuration tree.  Used in tests.

=item B<-verbose>

Be verbose.

=back

=cut
