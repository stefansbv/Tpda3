package Tpda3::Tk::Dialog::Message;

# ABSTRACT: Dialog for messages

use strict;
use warnings;
use utf8;
use Locale::TextDomain 1.20 qw(Tpda3);
use Tk::DialogBox;

require Tpda3::Utils;

sub new {
    my ($class, $view, $opts) = @_;

    my $self = {
        view   => $view,
        dialog => $opts,
    };

    bless( $self, $class );

    return $self;
}

sub message_dialog {
    my ( $self, $message, $details, $icon, $type ) = @_;

    #--- Dialog Box

    # # Make all buttons same width
    # my $len = max map { length } ($b_yes, $b_cancel, $b_no);
    # my $len_l = int($len / 2);
    # my $len_r = $len - $len_l;
    # $padded = sprintf("%*s", $len_l, $text);
    # $padded = sprintf("%-*s", $len_r, $text);

    my $default_buttons = [ __ 'OK' ];
    my $buttons =
                  $type eq q{}     ?  $default_buttons
                : $type eq 'ok'    ?  [ __ 'OK' ]
                : $type eq 'close' ?  [ __ 'Close' ]
                : $type eq 'yn'    ?  [ __ 'Yes', __ 'No' ]
                : $type eq 'ycn'   ?  [ __ 'Yes', __ 'Cancel', __ 'No' ]
                :                     $default_buttons
                ;

    my $dlg = $self->{view}->DialogBox(
        -title   => __ 'Dialog',
        -buttons => $buttons,
    );

    #--- Frame top

    my $frame_top = $dlg->Frame(
    )->pack(
        -expand => 1,
        -fill   => 'x',
    );

    my $frame_top_left = $frame_top->Frame()->pack(
        -side   => 'left',
        -expand => 0,
        -fill   => 'x',
        -anchor => 'w',
        -padx   => 15,
        -pady   => 10,
    );

    my $frame_top_right = $frame_top->Frame()->pack(
        -side   => 'right',
        -expand => 1,
        -fill   => 'x',
        -anchor => 'e',
        -padx   => 5,
        -pady   => 10,
    );

    my $mid_frame = $dlg->Frame(
    )->pack(
        -expand => 1,
        -fill   => 'both',
    );

    #-- icon

    my $bg = $frame_top_left->cget('-background');
    my $w_bitmap = $frame_top_left->Canvas(
        Name                => "bitmap",
        -width              => 32,
        -height             => 32,
        -highlightthickness => 0,
        -background         => $bg,
    )->pack();

    $self->make_icon($w_bitmap, $icon);

    #-- title (optional)

    #    error info question
    my @options2 = ( N__"Error", N__"Info", N__"Question");
    my $option_e = __( $options2[0] );
    my $option_i = __( $options2[1] );
    my $option_q = __( $options2[2] );
    my $title
        = $icon eq 'error'    ? $option_e
        : $icon eq 'info'     ? $option_i
        : $icon eq 'question' ? $option_q
        :                     q{} # default
        ;

    my $ltitle = $frame_top_right->Label(
        -text => $title,
        -fg   => 'blue',
    )->pack( -anchor => 'se', );

    #-- label

    my ( $text, $color )
        = $details ? Tpda3::Utils->parse_message($details) : q{};
    $color ||= 'black';

    my $lmessage = $mid_frame->Label( -text => $message )->pack;
    my $ldetails = $mid_frame->Label( -text => $text, -fg => $color )->pack;

    #---

    my $result = $dlg->Show;

    my @options  = ( N__"Yes", N__"Cancel", N__"No");
    my $option_y = __( $options[0] );
    my $option_c = __( $options[1] );
    my $option_n = __( $options[2] );

    my $answer
        # button       label        answer
        = $result =~ /^$option_y$/i ? q{yes}
        : $result =~ /^$option_n$/i ? q{no}
        : $result =~ /^$option_c$/i ? q{cancel}
        :                           undef # default
        ;

    return $answer;
}

sub make_icon {
    my ( $self, $w_bitmap, $icon ) = @_;

    my $view = $self->{view};

    $icon = 'info' unless $icon;             # default icon

    my %image;

    $image{b1}{$view} = $view->Bitmap(
        -foreground => 'black',
        -data       => "#define b1_width 32\n#define b1_height 32
static unsigned char q1_bits[] = {
   0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0xe0, 0x00, 0xc0, 0x00, 0x00, 0x03,
   0x20, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10,
   0x04, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40,
   0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80,
   0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80,
   0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40,
   0x04, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x08,
   0x60, 0x00, 0x00, 0x04, 0x80, 0x03, 0x80, 0x03, 0x00, 0x0c, 0x78, 0x00,
   0x00, 0x30, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00,
   0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"
    );

    $image{b2}{$view} = $view->Bitmap(
        -foreground => 'white',
        -data       => "#define b2_width 32\n#define b2_height 32
static unsigned char b2_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x00,
   0xc0, 0xff, 0xff, 0x03, 0xe0, 0xff, 0xff, 0x07, 0xf0, 0xff, 0xff, 0x0f,
   0xf8, 0xff, 0xff, 0x1f, 0xfc, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x3f,
   0xfe, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x7f,
   0xfe, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x7f,
   0xfe, 0xff, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x3f,
   0xf8, 0xff, 0xff, 0x1f, 0xf0, 0xff, 0xff, 0x0f, 0xe0, 0xff, 0xff, 0x07,
   0x80, 0xff, 0xff, 0x03, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0xf0, 0x07, 0x00,
   0x00, 0xc0, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00,
   0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"
    );

    $image{q}{$view} = $view->Bitmap(
        -foreground => 'blue',
        -data       => "#define q_width 32\n#define q_height 32
static unsigned char q_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00,
   0x00, 0x10, 0x0f, 0x00, 0x00, 0x18, 0x1e, 0x00, 0x00, 0x38, 0x1e, 0x00,
   0x00, 0x38, 0x1e, 0x00, 0x00, 0x10, 0x0f, 0x00, 0x00, 0x80, 0x07, 0x00,
   0x00, 0xc0, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00,
   0x00, 0xe0, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"
    );

    $image{i}{$view} = $view->Bitmap(
        -foreground => 'blue',
        -data       => "#define i_width 32\n#define i_height 32
static unsigned char i_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xe0, 0x01, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00,
   0x00, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xf8, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00,
   0x00, 0xe0, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00,
   0x00, 0xe0, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0xf0, 0x07, 0x00,
   0x00, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"
    );

    $image{w1}{$view} = $view->Bitmap(
        -foreground => 'black',
        -data       => "#define w1_width 32\n#define w1_height 32
static unsigned char w1_bits[] = {
   0x00, 0x80, 0x01, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x20, 0x04, 0x00,
   0x00, 0x10, 0x04, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00,
   0x00, 0x08, 0x10, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x20, 0x00,
   0x00, 0x02, 0x20, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00,
   0x00, 0x01, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x01,
   0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x02,
   0x20, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x08,
   0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x10,
   0x04, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x40,
   0x01, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x20,
   0xfc, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00};"
    );

    $image{w2}{$view} = $view->Bitmap(
        -foreground => 'yellow',
        -data       => "#define w2_width 32\n#define w2_height 32
static unsigned char w2_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x03, 0x00,
   0x00, 0xe0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xf0, 0x07, 0x00,
   0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0xf8, 0x1f, 0x00,
   0x00, 0xfc, 0x1f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xfe, 0x3f, 0x00,
   0x00, 0xfe, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0xff, 0x00,
   0x80, 0xff, 0xff, 0x00, 0x80, 0xff, 0xff, 0x01, 0xc0, 0xff, 0xff, 0x01,
   0xc0, 0xff, 0xff, 0x03, 0xe0, 0xff, 0xff, 0x03, 0xe0, 0xff, 0xff, 0x07,
   0xf0, 0xff, 0xff, 0x07, 0xf0, 0xff, 0xff, 0x0f, 0xf8, 0xff, 0xff, 0x0f,
   0xf8, 0xff, 0xff, 0x1f, 0xfc, 0xff, 0xff, 0x1f, 0xfe, 0xff, 0xff, 0x3f,
   0xfe, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0x3f, 0xfc, 0xff, 0xff, 0x1f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"
    );

    $image{w3}{$view} = $view->Bitmap(
        -foreground => 'black',
        -data       => "#define w3_width 32\n#define w3_height 32
static unsigned char w3_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xc0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00,
   0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00,
   0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x00,
   0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x03, 0x00,
   0x00, 0xc0, 0x03, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"
    );

    if ( $icon eq 'error' ) {
        $w_bitmap->create(qw(oval 0 0 31 31 -fill red -outline black));
        $w_bitmap->create(qw(line 9 9 23 23 -fill white -width 4));
        $w_bitmap->create(qw(line 9 23 23 9 -fill white -width 4));
    }
    elsif ( $icon eq 'info' ) {
        $w_bitmap->create( qw(image 0 0 -anchor nw),
            -image => $image{b1}{$view} );
        $w_bitmap->create( qw(image 0 0 -anchor nw),
            -image => $image{b2}{$view} );
        $w_bitmap->create( qw(image 0 0 -anchor nw),
            -image => $image{i}{$view} );
    }
    elsif ( $icon eq 'question' ) {
        $w_bitmap->create( qw(image 0 0 -anchor nw),
            -image => $image{b1}{$view} );
        $w_bitmap->create( qw(image 0 0 -anchor nw),
            -image => $image{b2}{$view} );
        $w_bitmap->create( qw(image 0 0 -anchor nw),
            -image => $image{q}{$view} );
    }
    else {
        $w_bitmap->create( qw(image 0 0 -anchor nw),
            -image => $image{w1}{$view} );
        $w_bitmap->create( qw(image 0 0 -anchor nw),
            -image => $image{w2}{$view} );
        $w_bitmap->create( qw(image 0 0 -anchor nw),
            -image => $image{w3}{$view} );
    }
}

1;

=head1 SYNOPSIS

    require Tpda3::Tk::Dialog::Message;

    my $dlg = Tpda3::Tk::Dialog::Message->new($self->view);

    $dlg->message_dialog($message, $details, 'icon', 'type');

Where icon can be one of: 'error', 'info', or 'question'.

Where type can be one of: 'ok', 'close', 'yn', or 'ycn'.

=head2 new

Constructor method.

=head2 message_dialog

Define and show message dialog.  MsgBox doesn't allow to change the
button labels.

=head2 make_icon

From:

 msgbox.tcl --

    Implements messageboxes for platforms that do not have native
    messagebox support.

 RCS: @(#) $Id: msgbox.tcl,v 1.30 2006/01/25 18:22:04 dgp Exp $

 Copyright (c) 1994-1997 Sun Microsystems, Inc.

 See the file "license.terms" for information on usage and redistribution
 of this file, and for a DISCLAIMER OF ALL WARRANTIES.

 Translated to Perl/Tk by Slaven Rezic

 Version: 4.002

=cut
